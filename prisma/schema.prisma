// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum tipoUsuario {
  admin
  cliente
  tienda
  repartidor
}


enum tipoVehiculo {
  moto
  bicicleta
  automovil
}

enum estado {
  recibido
  preparando
  listo
  enCamino
  entregado
  cancelado
}

enum metodoPago {
  efectivo
  tarjeta
  transferencia
  pagoMovil 
}

enum categoriaProducto {
  Desayuno
  Almuerzo
  Cena
  Postre
}


model user {
  id           Int            @id @default(autoincrement())
  nombre       String         @db.VarChar(100)
  apellido     String         @db.VarChar(100)
  telefono     String         @db.VarChar(15)
  email        String         @db.VarChar(100)
  contraseña   String         @db.VarChar(255)
  tipo         tipoUsuario
  fechaRegistro DateTime
  activo       Boolean
  fotoPerfil   String
  direccion    String
  documento_identidad String  @db.Char(50)

  cliente      Cliente?
  tienda       Shop?
  repartidor   DeliveryPerson?

  Message Message[]
}

model Cliente {
  id         String   @id @default(uuid())
  userId     Int      @unique
  user       user     @relation(fields: [userId], references: [id])
  pedidos    Pedido[]
}

model Shop {
  id                   String   @id @default(uuid())
  userId               Int      @unique
  user                 user     @relation(fields: [userId], references: [id])

  nombre               String
  descripcion          String
  ubicacion            String
  horarioApertura      DateTime
  horarioCierre        DateTime
  tiempoEntregaPromedio Int
  costoEnvio           Decimal
  rating               Decimal
  fotosTienda          Json

  productos            Producto[]
  pedidos              Pedido[]
  promociones          Promotion[]
  estadisticas         EstadisticasTienda[]
}

model DeliveryPerson {
  id                 String   @id @default(uuid())
  userId             Int      @unique
  user               user     @relation(fields: [userId], references: [id])

  tipoVehiculo       tipoVehiculo
  licencia           String
  disponibilidad     Boolean
  ubicacionActual    String
  rating             Decimal
  vehiculoDescripcion String
  fotosVehiculo      Json

  pedidos            Pedido[]
}

model Pedido {
  id           String     @id @default(uuid())
  fecha        DateTime   @default(now())
  estado       estado
  total        Float
  metodoPago   metodoPago

  clienteId    String
  cliente      Cliente    @relation(fields: [clienteId], references: [id])

  tiendaId     String
  tienda       Shop       @relation(fields: [tiendaId], references: [id])

  repartidorId String?
  repartidor   DeliveryPerson? @relation(fields: [repartidorId], references: [id])

  detalles     DetallePedido[]
  mensajes     Message[]
}

model DetallePedido {
  id              String     @id @default(uuid())
  cantidad        Int
  precioUnitario  Float

  pedidoId        String
  pedido          Pedido     @relation(fields: [pedidoId], references: [id])

  productoId      String
  producto        Producto   @relation(fields: [productoId], references: [id])

  instruccionesEspeciales String?
}

model Categoria {
  id        String     @id @default(uuid())
  nombre    String
  icono     String?
  productos Producto[]
}

model Producto {
  id             String   @id @default(uuid())
  nombre         String
  descripcion    String?
  precio         Float
  stock_actual   Int
  stock_minimo   Int      @default(5)
  imagen_url     String?
  activo         Boolean  @default(true)

  tiendaId       String
  tienda         Shop     @relation(fields: [tiendaId], references: [id])

  categoriaId    String?
  categoria      Categoria? @relation(fields: [categoriaId], references: [id])

  movimientos    MovimientoInventario[]
  detalles       DetallePedido[]

  Promotion Promotion[]
}

model MovimientoInventario {
  id          String   @id @default(uuid())
  tipo        String   // "VENTA", "REPOSICIÓN", "AJUSTE"
  cantidad    Int
  fecha       DateTime @default(now())

  productoId  String
  producto    Producto @relation(fields: [productoId], references: [id])
}

model EstadisticasTienda {
  id             String   @id @default(uuid())
  fecha          DateTime @default(now())
  ventas_totales Float
  total_pedidos  Int
  producto_top   String?

  tiendaId       String
  tienda         Shop     @relation(fields: [tiendaId], references: [id])
}

model Message {
  id          Int      @id @default(autoincrement())
  pedidoId    String
  pedido      Pedido   @relation(fields: [pedidoId], references: [id])

  remitenteId Int
  remitente   user     @relation(fields: [remitenteId], references: [id])

  mensaje     String
  fechaEnvio  DateTime
  leido       Boolean
}

model Promotion {
  id           String   @id @default(uuid())
  titulo       String
  descripcion  String
  descuento    Float
  fechaInicio  DateTime
  fechaFin     DateTime
  activa       Boolean
  imagen_url   String?

  tiendaId     String
  tienda       Shop     @relation(fields: [tiendaId], references: [id])

  productoId   String?
  producto     Producto? @relation(fields: [productoId], references: [id])
}